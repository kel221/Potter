import pygame
import random

# Inicialização do Pygame
pygame.init()

# Configurações da tela
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Roube um Brainrot")

# Cores
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Classe do Jogador
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill(BLUE)
        self.rect = self.image.get_rect()
        self.rect.x = 100
        self.rect.y = SCREEN_HEIGHT - 100
        self.speed = 5
        self.jump_power = -15
        self.gravity = 0.8
        self.vel_y = 0
        self.is_jumping = False

    def update(self):
        # Movimento horizontal
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and self.rect.left > 0:
            self.rect.x -= self.speed
        if keys[pygame.K_RIGHT] and self.rect.right < SCREEN_WIDTH:
            self.rect.x += self.speed
        # Pulo
        if keys[pygame.K_SPACE] and not self.is_jumping:
            self.vel_y = self.jump_power
            self.is_jumping = True
        # Aplicar gravidade
        self.vel_y += self.gravity
        self.rect.y += self.vel_y
        # Colisão com o chão
        if self.rect.bottom > SCREEN_HEIGHT:
            self.rect.bottom = SCREEN_HEIGHT
            self.vel_y = 0
            self.is_jumping = False

# Classe dos Itens de Brainrot
class BrainrotItem(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((30, 30))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, SCREEN_WIDTH - 30)
        self.rect.y = -50
        self.speed = 3

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > SCREEN_HEIGHT:
            self.kill()  # Remove item se sair da tela

# Classe dos Obstáculos
class Obstacle(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((40, 40))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, SCREEN_WIDTH - 40)
        self.rect.y = -50
        self.speed = 4

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > SCREEN_HEIGHT:
            self.kill()

# Grupos de sprites
all_sprites = pygame.sprite.Group()
brainrot_items = pygame.sprite.Group()
obstacles = pygame.sprite.Group()
player = Player()
all_sprites.add(player)

# Variáveis do jogo
score = 0
font = pygame.font.SysFont(None, 36)
clock = pygame.time.Clock()
running = True
spawn_timer = 0

# Loop principal
while running:
    # Eventos
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Spawn de itens e obstáculos
    spawn_timer += 1
    if spawn_timer > 30:  # A cada 30 frames
        if random.random() < 0.6:  # 60% de chance de spawnar item
            item = BrainrotItem()
            all_sprites.add(item)
            brainrot_items.add(item)
        else:  # 40% de chance de spawnar obstáculo
            obstacle = Obstacle()
            all_sprites.add(obstacle)
            obstacles.add(obstacle)
        spawn_timer = 0

    # Atualizar
    all_sprites.update()

    # Colisões
    if pygame.sprite.spritecollide(player, brainrot_items, True):
        score += 10  # Ganha pontos ao coletar brainrot
    if pygame.sprite.spritecollide(player, obstacles, False):
        running = False  # Game over ao colidir com obstáculo

    # Desenhar
    screen.fill(WHITE)
    all_sprites.draw(screen)
    score_text = font.render(f"Brainrot Score: {score}", True, (0, 0, 0))
    screen.blit(score_text, (10, 10))
    pygame.display.flip()

    # Controlar FPS
    clock.tick(60)

# Game over
game_over_text = font.render(f"Game Over! Score: {score}", True, (0, 0, 0))
screen.blit(game_over_text, (SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2))
pygame.display.flip()
pygame.time.wait(2000)

pygame.quit()